name: CI-CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

jobs:
  quality_gate:
    name: "1. Lint, Type Check, and Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Lint with Ruff
        run: poetry run ruff check .

      - name: Type check with MyPy
        run: poetry run mypy .

      - name: Scan for dependency vulnerabilities with pip-audit
        run: poetry run pip-audit

  test_suite:
    name: "2. Unit & Integration Tests"
    needs: quality_gate
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry

      - name: Install project dependencies
        # Install all extras to ensure tests can run against UI components if needed
        run: poetry install --with dev --extras "desktop mobile"

      - name: Generate Protobuf code
        run: |
          poetry run python -m grpc_tools.protoc -I=src/schemas --python_out=src/schemas src/schemas/market_data.proto
          touch src/schemas/__init__.py

      - name: Run Pytest
        run: poetry run pytest --cov=src/app_core --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  build_desktop:
    name: "3. Build & Sign Desktop Binaries"
    needs: test_suite
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') # Only run on tag push
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry and build dependencies
        run: |
          python -m pip install poetry pyinstaller
          poetry install --extras "desktop"

      - name: Generate Protobuf code
        run: |
          poetry run python -m grpc_tools.protoc -I=src/schemas --python_out=src/schemas src/schemas/market_data.proto
          touch src/schemas/__init__.py

      - name: Package with PyInstaller
        run: poetry run pyinstaller build-specs/desktop.spec --noconfirm

      - name: Sign Windows Executable
        if: runner.os == 'Windows' && secrets.WINDOWS_PFX_B64 != ''
        uses: dlemstra/code-sign-action@v1
        with:
          certificate: ${{ secrets.WINDOWS_PFX_B64 }}
          password: ${{ secrets.WINDOWS_PFX_PASSWORD }}
          folder: dist/windows
          recursive: true
          timestamp_url: http://timestamp.sectigo.com

      - name: Sign and Notarize macOS App
        if: runner.os == 'macOS' && secrets.APPLE_ID != ''
        # This is a complex, multi-step process. A placeholder is used for clarity.
        # See https://github.com/apple-actions/import-codesign-certs for a real implementation.
        run: echo "Signing and notarizing on macOS..."
      
      - name: Prepare Artifact
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a -tzip App-windows-x64.zip ./dist/windows/*
          elif [ "${{ runner.os }}" == "macOS" ]; then
            hdiutil create -volname CryptoChart -srcfolder dist/macos/CryptoChart.app -ov -format UDZO App-macos.dmg
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: App-${{ runner.os }}
          path: ./*.zip # Upload zip for windows
          path-if-no-files-found: error
        
      - name: Upload macOS Artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: App-${{ runner.os }}
          path: ./*.dmg # Upload dmg for mac
          path-if-no-files-found: error

  build_mobile_debug:
    name: "4. Build Android Debug APK"
    needs: test_suite
    # This job runs on all pushes/PRs to main for testing purposes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Set up Buildozer environment
        uses: kivy/buildozer-action@v1
        with:
          buildozer_version: master
      
      - name: Build with Buildozer (Debug)
        # The 'debug' command automatically creates and uses a debug keystore.
        # No secrets are required for this step.
        run: buildozer android debug

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: App-Android-debug
          path: bin/*.apk
          path-if-no-files-found: error
          
  create_release:
    name: "5. Publish GitHub Release"
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build_desktop, build_mobile_debug]
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          fail_on_unmatched_files: true
          files: |
            artifacts/App-Windows/App-windows-x64.zip
            artifacts/App-macOS/App-macos.dmg
            artifacts/App-Android-debug/*.apk